// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto_video/main.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Main
 */
export interface Main {
    /**
     * @generated from protobuf field: uint32 start = 1;
     */
    start: number;
    /**
     * @generated from protobuf field: uint32 end = 2;
     */
    end: number;
    /**
     * @generated from protobuf field: bytes audio = 3;
     */
    audio: Uint8Array;
    /**
     * @generated from protobuf field: repeated Action action = 4;
     */
    action: Action[];
    /**
     * @generated from protobuf field: VideoState state = 5;
     */
    state?: VideoState;
}
/**
 * @generated from protobuf message Action
 */
export interface Action {
    /**
     * @generated from protobuf field: uint32 time = 1;
     */
    time: number;
    /**
     * @generated from protobuf field: ActionType type = 2;
     */
    type: ActionType;
    /**
     * @generated from protobuf field: optional bytes value = 3;
     */
    value?: Uint8Array;
}
/**
 * @generated from protobuf message VideoState
 */
export interface VideoState {
    /**
     * @generated from protobuf field: bytes files = 1;
     */
    files: Uint8Array; // BSON(Volume.toJSON())
    /**
     * @generated from protobuf field: optional string curOpen = 2;
     */
    curOpen?: string;
    /**
     * @generated from protobuf field: uint32 curToolbox = 3;
     */
    curToolbox: number;
    /**
     * @generated from protobuf field: optional uint32 curOutput = 4;
     */
    curOutput?: number;
}
/**
 * @generated from protobuf enum ActionType
 */
export enum ActionType {
    /**
     * ChangeToolbox
     *
     * @generated from protobuf enum value: ChangeToolbox = 0;
     */
    ChangeToolbox = 0,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFolder = 1;
     */
    OpenFolder = 1,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CloseFolder = 2;
     */
    CloseFolder = 2,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: OpenFile = 3;
     */
    OpenFile = 3,
    /**
     * BSON(ChangeSet.toJSON())
     *
     * @generated from protobuf enum value: ChangeText = 4;
     */
    ChangeText = 4,
    /**
     * null
     *
     * @generated from protobuf enum value: Run = 5;
     */
    Run = 5,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFile = 6;
     */
    CreateFile = 6,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: CreateFolder = 7;
     */
    CreateFolder = 7,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFile = 8;
     */
    DeleteFile = 8,
    /**
     * ToggleFS
     *
     * @generated from protobuf enum value: DeleteFolder = 9;
     */
    DeleteFolder = 9,
    /**
     * Move
     *
     * @generated from protobuf enum value: Move = 10;
     */
    Move = 10,
    /**
     * ChangeOutput
     *
     * @generated from protobuf enum value: ChangeOutput = 11;
     */
    ChangeOutput = 11,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusToolbox = 12;
     */
    FocusToolbox = 12,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusCode = 13;
     */
    FocusCode = 13,
    /**
     * null
     *
     * @generated from protobuf enum value: FocusOutput = 14;
     */
    FocusOutput = 14,
    /**
     * BSON(EditorSelection.toJSON())
     *
     * @generated from protobuf enum value: CodeSelect = 15;
     */
    CodeSelect = 15
}
// @generated message type with reflection information, may provide speed optimized methods
class Main$Type extends MessageType<Main> {
    constructor() {
        super("Main", [
            { no: 1, name: "start", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "end", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "audio", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "action", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Action },
            { no: 5, name: "state", kind: "message", T: () => VideoState }
        ]);
    }
    create(value?: PartialMessage<Main>): Main {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.start = 0;
        message.end = 0;
        message.audio = new Uint8Array(0);
        message.action = [];
        if (value !== undefined)
            reflectionMergePartial<Main>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Main): Main {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 start */ 1:
                    message.start = reader.uint32();
                    break;
                case /* uint32 end */ 2:
                    message.end = reader.uint32();
                    break;
                case /* bytes audio */ 3:
                    message.audio = reader.bytes();
                    break;
                case /* repeated Action action */ 4:
                    message.action.push(Action.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* VideoState state */ 5:
                    message.state = VideoState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Main, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 start = 1; */
        if (message.start !== 0)
            writer.tag(1, WireType.Varint).uint32(message.start);
        /* uint32 end = 2; */
        if (message.end !== 0)
            writer.tag(2, WireType.Varint).uint32(message.end);
        /* bytes audio = 3; */
        if (message.audio.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.audio);
        /* repeated Action action = 4; */
        for (let i = 0; i < message.action.length; i++)
            Action.internalBinaryWrite(message.action[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* VideoState state = 5; */
        if (message.state)
            VideoState.internalBinaryWrite(message.state, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Main
 */
export const Main = new Main$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Action$Type extends MessageType<Action> {
    constructor() {
        super("Action", [
            { no: 1, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["ActionType", ActionType] },
            { no: 3, name: "value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Action>): Action {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.time = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Action): Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 time */ 1:
                    message.time = reader.uint32();
                    break;
                case /* ActionType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 time = 1; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).uint32(message.time);
        /* ActionType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional bytes value = 3; */
        if (message.value !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Action
 */
export const Action = new Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoState$Type extends MessageType<VideoState> {
    constructor() {
        super("VideoState", [
            { no: 1, name: "files", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "curOpen", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "curToolbox", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "curOutput", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoState>): VideoState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.files = new Uint8Array(0);
        message.curToolbox = 0;
        if (value !== undefined)
            reflectionMergePartial<VideoState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoState): VideoState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes files */ 1:
                    message.files = reader.bytes();
                    break;
                case /* optional string curOpen */ 2:
                    message.curOpen = reader.string();
                    break;
                case /* uint32 curToolbox */ 3:
                    message.curToolbox = reader.uint32();
                    break;
                case /* optional uint32 curOutput */ 4:
                    message.curOutput = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes files = 1; */
        if (message.files.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.files);
        /* optional string curOpen = 2; */
        if (message.curOpen !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.curOpen);
        /* uint32 curToolbox = 3; */
        if (message.curToolbox !== 0)
            writer.tag(3, WireType.Varint).uint32(message.curToolbox);
        /* optional uint32 curOutput = 4; */
        if (message.curOutput !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.curOutput);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VideoState
 */
export const VideoState = new VideoState$Type();
